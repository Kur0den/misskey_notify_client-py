import asyncio
import json
import os
import re
import shutil
import threading
from sys import exit

import pystray
import requests
import websockets
from misskey import Misskey
from misskey import exceptions as mk_exceptions
from notifypy import Notify
from PIL import Image

notifier = Notify()


# ignore_events = ['unreadNotification', 'readAllNotifications', 'unreadMention', 'readAllUnreadMentions', 'unreadSpecifiedNote', 'readAllUnreadSpecifiedNotes', 'unreadMessagingMessage', 'readAllMessagingMessages']

if os.path.exists('config.json'):
    config = json.load(open(file='config.json', mode='r', encoding='UTF-8'))
    domain = config['host']
    i = config['i']
else:
    config = {}
    config['host'] = input('„Éâ„É°„Ç§„É≥„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ(‰æã:example.com)->')
    config['i'] = input('"ÈÄöÁü•„ÇíË¶ã„Çã"„ÅÆÊ®©Èôê„ÇíÊúâÂäπ„Å´„Åó„ÅüAPI„Éà„Éº„ÇØ„É≥„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ->')
    print('ÂàùÊúüË®≠ÂÆö„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü\nË™§ÂÖ•Âäõ„Åó„Åü/ÂÜçË®≠ÂÆö„Çí„Åó„Åü„ÅÑÂ†¥Âêà„ÅØ`config.json`„ÇíÂâäÈô§„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
    json.dump(config, fp=open(file="config.json", mode='x', encoding='UTF-8'))
ws_url = f"wss://{config['host']}/streaming?i={config['i']}"

# ÁîüÂ≠òÁ¢∫Ë™ç
resp_code = requests.request('GET', f'https://{config["host"]}').status_code
match resp_code:
    case 404:
        print('APIÊé•Á∂ö„Åå„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü\n - Âà©Áî®„Åó„Å¶„ÅÑ„Çã„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅåÊ≠£Â∏∏„Å´Á®ºÂÉç„Åó„Å¶„ÅÑ„Çã„Åã\n - ÂÖ•Âäõ„Åó„Åü„Éâ„É°„Ç§„É≥„ÅåÊ≠£„Åó„ÅÑ„Åã„Å©„ÅÜ„Åã\n„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
        exit()
    case 410 | 500 | 502 | 503:
        print('„Çµ„Éº„Éê„Éº„ÅåÊ≠£Â∏∏„Å´ÂøúÁ≠î„Åó„Åæ„Åõ„Çì„Åß„Åó„Åü\nÂà©Áî®„Åó„Å¶„ÅÑ„Çã„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅåÊ≠£Â∏∏„Å´Á®ºÂÉç„Åó„Å¶„ÅÑ„Çã„Åã„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\nStatusCode:', resp_code)
        exit()
    case 429:
        print('„É¨„Éº„Éà„É™„Éü„ÉÉ„Éà„Å´ÈÅî„Åó„Åæ„Åó„Åü\n„Åó„Å∞„Çâ„Åè„Åó„Å¶„Åã„ÇâÂÜçÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
        exit()

try:
    mk = Misskey(config['host'], i=config['i'])
except requests.exceptions.ConnectionError:
    print('„Éâ„É°„Ç§„É≥„ÅåÈÅï„ÅÑ„Åæ„Åô\nconfig.json„ÇíÂâäÈô§/Á∑®ÈõÜ„Åó„Å¶„ÇÇ„ÅÜ‰∏ÄÂ∫¶ÂÖ•Âäõ„Åó„Å™„Åä„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
    exit()
except mk_exceptions.MisskeyAuthorizeFailedException:
    print('API„Ç≠„Éº„ÅåÈÅï„ÅÑ„Åæ„Åô\nconfig.json„ÇíÂâäÈô§/Á∑®ÈõÜ„Åó„Å¶ÂÖ•Âäõ„Åó„Å™„Åä„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
    exit()
me = mk.i()


class main:
    @staticmethod
    async def notify_def(self, title: str, content: str, img: str | dict) -> None:
        '''
        ### ÈÄöÁü•„ÇíÈÄÅ‰ø°„Åô„Çã„Åü„ÇÅ„ÅÆÈñ¢Êï∞
        title: str
            ÈÄöÁü•„ÅÆ„Çø„Ç§„Éà„É´„Å´Ë°®Á§∫„Åô„ÇãÊñáÂ≠ó
        content: str
            ÈÄöÁü•„ÅÆÂÜÖÂÆπ
        img: str | dict
            ÈÄöÁü•„Å´Ë°®Á§∫„Åô„ÇãÁîªÂÉè„ÅÆ„Éë„Çπ
            dict„ÅØwebsocket„ÅÆrecv„Åù„ÅÆ„Åæ„ÅæÁ™Å„Å£Ëæº„ÇÄÁî®
        '''
        if isinstance(img, dict):
            try:
                img_Data = requests.get(img['avatarUrl'], stream=True, timeout=10)
                if img_Data.status_code == 200:
                    try:
                        with open(f'.data/{img["id"]}.png', 'xb') as file:
                            img_Data.raw.decode_content = True
                            shutil.copyfileobj(img_Data.raw, file)
                    except FileExistsError:
                        pass
                    img = f'.data/{img["id"]}.png'
            except KeyError:
                img = 'icon/icon.png'
        notifier.title = title
        notifier.message = content
        notifier.icon = img
        notifier.send()


    async def ws(self):
        async with websockets.connect(ws_url) as ws:
            print('ws connect')
            await ws.send(
                json.dumps({"type": "connect", "body": {"channel": "main", "id": "1"}})
            )
            print('ready')
            while True:
                recv = json.loads(await ws.recv())
                print(recv)  # „Éá„Éê„ÉÉ„Ç∞Áî®
                if recv['body']['type'] == 'notification':
                    recv_body = recv['body']['body']
                    match recv_body['type']:
                        case 'reaction':
                            if re.match(r'.+@', recv_body['reaction']) is None:
                                emoji = re.match(r'.+@', recv_body['reaction'])
                                title = f"{recv_body['user']['name']}„Åå{emoji.group()[1:-1]}„Åß„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Åó„Åæ„Åó„Åü"
                            else:
                                emoji = recv_body['reaction']
                                title = f"{recv_body['user']['name']}„Åå{emoji}„Åß„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Åó„Åæ„Åó„Åü"
                            await main.notify_def(title=title,
                                            content=recv_body['note']['text'],
                                            img=recv_body['user'])

                        case 'reply':
                            msg = re.sub(
                                            pattern=r'(@.+@.+\..+\s)',
                                            repl='',
                                            string=recv_body['note']['text'],
                                            count=len(
                                                re.findall(
                                                    pattern=r'(@.+@.+\..+\s)',
                                                    string=recv_body['note']['text'])))
                            await main.notify_def(title=f"{recv_body['user']['name']}„ÅåËøî‰ø°„Åó„Åæ„Åó„Åü",
                                            content=f"{msg}\n------------\n{recv_body['note']['reply']['text']}",
                                            img=recv_body['user'])

                        case 'mention':
                            await main.notify_def(title=f'{recv_body["user"]["name"]}„Åå„É°„É≥„Ç∑„Éß„É≥„Åó„Åæ„Åó„Åü',
                                            content=re.sub(
                                                    pattern=r'(@.+@.+\..+\s)',
                                                    repl='',
                                                    string=recv_body['note']['text'],
                                                    count=len(re.findall(pattern=r'(@.+@.+\..+\s)',
                                                                        string=recv_body['note']['text']))),
                                            img=recv_body['user'])

                        case 'renote':
                            await main.notify_def(title=f"{recv_body['user']['name']}„Åå„É™„Éé„Éº„Éà„Åó„Åæ„Åó„Åü",
                                            content=recv_body['note']['renote']['text'],
                                            img=recv_body['user'])

                        case 'quote':
                            await main.notify_def(title=f"{recv_body['user']['name']}„ÅåÂºïÁî®„É™„Éé„Éº„Éà„Åó„Åæ„Åó„Åü",
                                            content=f'{recv_body["note"]["text"]}\n-------------\n{recv_body["note"]["renote"]["text"]}',
                                            img=recv_body['user'])

                        case 'follow':
                            await main.notify_def(title=f"{recv_body['user']['name']}@{recv_body['user']['host']}",
                                            content='„Éõ„Éß„É≠„Éº„Åï„Çå„Åæ„Åó„Åü',
                                            img=recv_body['user'])

                        case 'followRequestAccepted':
                            await main.notify_def(title=f"{recv_body['user']['name']}@{recv_body['user']['host']}",
                                            content='„Éõ„Éß„É≠„Éº„ÅåÊâøË™ç„Åï„Çå„Åæ„Åó„Åü',
                                            img=recv_body['user'])

                        case 'receiveFollowRequest':
                            await main.notify_def(title=f"{recv_body['user']['name']}@{recv_body['user']['host']}",
                                            content='„Éõ„Éß„É≠„Éº„Åå„É™„ÇØ„Ç®„Çπ„Éà„Åï„Çå„Åæ„Åó„Åü',
                                            img=recv_body['user'])

                        case 'pollEnded':
                            img_data = requests.get(recv_body['user']['avatarUrl'], stream=True, timeout=config['timeout'])
                            if img_data.status_code == 200:
                                try:
                                    with open(f'.data/{recv_body["user"]["id"]}.png', 'xb') as f:
                                        img_data.raw.decode_content = True
                                        shutil.copyfileobj(img_data.raw, f)
                                except FileExistsError:
                                    pass
                            votes = 0
                            most_vote = None
                            voted = None
                            if recv_body['note']['user']['id'] == me['id']:
                                title = 'Ëá™Ë∫´„ÅåÈñãÂßã„Åó„Åü„Ç¢„É≥„Ç±„Éº„Éà„ÅÆÁµêÊûú„ÅåÂá∫„Åæ„Åó„Åü'
                            else:
                                title = f'{recv_body["note"]["user"]["name"]}„ÅÆ„Ç¢„É≥„Ç±„Éº„Éà„ÅÆÁµêÊûú„ÅåÂá∫„Åæ„Åó„Åü'
                            message = f'{recv_body["note"]["text"]}\n------------'
                            for choice in recv_body['note']['poll']['choices']:
                                if choice['isVoted']:
                                    voted = choice
                                else:
                                    if choice['votes'] > votes:
                                        most_vote = choice
                                        votes = choice['votes']
                            if most_vote is None:
                                message += f"\n‚úÖüèÜ:{voted['text']}|{voted['votes']}Á•®"
                            else:
                                if voted is not None:
                                    message += f"\n‚úÖ  :{voted['text']}|{voted['votes']}Á•®"
                                message += f"\n  üèÜ:{most_vote['text']}|{most_vote['votes']}Á•®"
                            await main.notify_def(title=title, content=message, icon=f'.data/{recv_body["header"]}.png')

                        case 'app':
                            img_data = requests.get(recv_body['icon'], stream=True, timeout=config['timeout'])
                            if img_data.status_code == 200:
                                try:
                                    with open(f'.data/{recv_body["header"]}.png', 'xb') as file:
                                        img_data.raw.decode_content = True
                                        shutil.copyfileobj(img_data.raw, file)
                                except FileExistsError:
                                    pass
                            await main.notify_def(title=recv_body['header'],
                                            content=recv_body['body'],
                                            img=f'.data/{recv_body["header"]}.png')
                else:
                    pass


def notify_read():
    return_read = mk.notifications_mark_all_as_read()
    title = 'Misskey-Notify-Client'
    if return_read:
        message = 'ÈÄöÁü•„Çí„Åô„Åπ„Å¶Êó¢Ë™≠„Å´„Åó„Åæ„Åó„Åü'
    else:
        message = 'ÈÄöÁü•„ÅÆÊó¢Ë™≠Âåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
    asyncio.run(main.notify_def(title=title, content=message, img='icon/icon.png'))


def stop():
    print('Êú™ÂÆüË£Ö„Å†„Çà')


icon = pystray.Icon('Misskey-notify-client', icon=Image.open('icon/icon.png'), menu=pystray.Menu(
    pystray.MenuItem(
        '„Åô„Åπ„Å¶Êó¢Ë™≠„Å´„Åô„Çã',
        notify_read,
        checked=None),
    pystray.MenuItem(
        'ÁµÇ‰∫Ü(Êú™ÂÆüË£Ö)',
        stop,
        checked=None)))
# TODO: „Å©„ÅÆÈÄöÁü•Âèó„ÅëÂèñ„Çã„ÅãË®≠ÂÆö„Åß„Åç„Çã„Çà„ÅÜ„Å´

print('client_startup...')
icon_thread = threading.Thread(target=icon.run).start()
print('icon starting...')

asyncio.run(main.ws())
